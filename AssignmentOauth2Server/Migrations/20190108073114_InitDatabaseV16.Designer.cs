// <auto-generated />
using System;
using AssignmentOauth2Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AssignmentOauth2Server.Migrations
{
    [DbContext(typeof(AssignmentOauth2ServerContext))]
    [Migration("20190108073114_InitDatabaseV16")]
    partial class InitDatabaseV16
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AssignmentOauth2Server.Controllers.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<string>("RollNumber");

                    b.Property<string>("Salt");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountInfomation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<DateTime>("BirthDay");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("LastName");

                    b.Property<long>("OwnerId");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.ToTable("AccountInfomation");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountLogs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedBy");

                    b.Property<long>("OwnerId");

                    b.HasKey("Id");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountLogsDefault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountLogsId");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AccountLogsId")
                        .IsUnique();

                    b.ToTable("Default");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountLogsMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountLogsId");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AccountLogsId")
                        .IsUnique();

                    b.ToTable("Mail");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountLogsMark", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountLogsId");

                    b.Property<int>("ClassId");

                    b.Property<int>("SubjectId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AccountLogsId")
                        .IsUnique();

                    b.ToTable("Mark");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime");

                    b.Property<DateTime>("IntendTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.Classes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassId");

                    b.Property<long>("OwnerId");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.Credential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("ExpiredAt");

                    b.Property<long>("OwnerId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Credential");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("DeletedAt");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountInfomation", b =>
                {
                    b.HasOne("AssignmentOauth2Server.Models.Account", "Account")
                        .WithOne("AccountInfomation")
                        .HasForeignKey("AssignmentOauth2Server.Models.AccountInfomation", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountLogsDefault", b =>
                {
                    b.HasOne("AssignmentOauth2Server.Models.AccountLogs")
                        .WithOne("Default")
                        .HasForeignKey("AssignmentOauth2Server.Models.AccountLogsDefault", "AccountLogsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountLogsMail", b =>
                {
                    b.HasOne("AssignmentOauth2Server.Models.AccountLogs")
                        .WithOne("Mail")
                        .HasForeignKey("AssignmentOauth2Server.Models.AccountLogsMail", "AccountLogsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AssignmentOauth2Server.Models.AccountLogsMark", b =>
                {
                    b.HasOne("AssignmentOauth2Server.Models.AccountLogs")
                        .WithOne("Mark")
                        .HasForeignKey("AssignmentOauth2Server.Models.AccountLogsMark", "AccountLogsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
